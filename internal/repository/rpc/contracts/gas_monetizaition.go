// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// GasMonetizationMetaData contains all meta data concerning the GasMonetization contract.
var GasMonetizationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawalBlocksFrequencyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmationsToMakeWithdrawal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowedConfirmationsDeviation\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalBlocksFrequencyLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"confirmationsToMakeWithdrawal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowedConfirmationsDeviation\",\"type\":\"uint256\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"ProjectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ProjectContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ProjectContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"ProjectContractsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"}],\"name\":\"ProjectMetadataUriUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProjectRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"WithdrawalBlockLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"WithdrawalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"WithdrawalConfirmationsDeviationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"WithdrawalConfirmationsLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNDS_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECTS_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDS_DATA_PROVIDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"addProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"addProjectContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"completeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockId\",\"type\":\"uint256\"}],\"name\":\"hasPendingWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"removeProjectContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"setProjectContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"}],\"name\":\"updateProjectMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawalAllowedConfirmationsDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawalBlocksFrequencyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawalConfirmationsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// GasMonetizationABI is the input ABI used to generate the binding from.
// Deprecated: Use GasMonetizationMetaData.ABI instead.
var GasMonetizationABI = GasMonetizationMetaData.ABI

// GasMonetizationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GasMonetizationMetaData.Bin instead.
var GasMonetizationBin = GasMonetizationMetaData.Bin

// DeployGasMonetization deploys a new Ethereum contract, binding an instance of GasMonetization to it.
func DeployGasMonetization(auth *bind.TransactOpts, backend bind.ContractBackend, withdrawalBlocksFrequencyLimit *big.Int, confirmationsToMakeWithdrawal *big.Int, allowedConfirmationsDeviation *big.Int) (common.Address, *types.Transaction, *GasMonetization, error) {
	parsed, err := GasMonetizationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GasMonetizationBin), backend, withdrawalBlocksFrequencyLimit, confirmationsToMakeWithdrawal, allowedConfirmationsDeviation)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GasMonetization{GasMonetizationCaller: GasMonetizationCaller{contract: contract}, GasMonetizationTransactor: GasMonetizationTransactor{contract: contract}, GasMonetizationFilterer: GasMonetizationFilterer{contract: contract}}, nil
}

// GasMonetization is an auto generated Go binding around an Ethereum contract.
type GasMonetization struct {
	GasMonetizationCaller     // Read-only binding to the contract
	GasMonetizationTransactor // Write-only binding to the contract
	GasMonetizationFilterer   // Log filterer for contract events
}

// GasMonetizationCaller is an auto generated read-only Go binding around an Ethereum contract.
type GasMonetizationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GasMonetizationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GasMonetizationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GasMonetizationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GasMonetizationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GasMonetizationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GasMonetizationSession struct {
	Contract     *GasMonetization  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GasMonetizationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GasMonetizationCallerSession struct {
	Contract *GasMonetizationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// GasMonetizationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GasMonetizationTransactorSession struct {
	Contract     *GasMonetizationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// GasMonetizationRaw is an auto generated low-level Go binding around an Ethereum contract.
type GasMonetizationRaw struct {
	Contract *GasMonetization // Generic contract binding to access the raw methods on
}

// GasMonetizationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GasMonetizationCallerRaw struct {
	Contract *GasMonetizationCaller // Generic read-only contract binding to access the raw methods on
}

// GasMonetizationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GasMonetizationTransactorRaw struct {
	Contract *GasMonetizationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGasMonetization creates a new instance of GasMonetization, bound to a specific deployed contract.
func NewGasMonetization(address common.Address, backend bind.ContractBackend) (*GasMonetization, error) {
	contract, err := bindGasMonetization(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GasMonetization{GasMonetizationCaller: GasMonetizationCaller{contract: contract}, GasMonetizationTransactor: GasMonetizationTransactor{contract: contract}, GasMonetizationFilterer: GasMonetizationFilterer{contract: contract}}, nil
}

// NewGasMonetizationCaller creates a new read-only instance of GasMonetization, bound to a specific deployed contract.
func NewGasMonetizationCaller(address common.Address, caller bind.ContractCaller) (*GasMonetizationCaller, error) {
	contract, err := bindGasMonetization(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationCaller{contract: contract}, nil
}

// NewGasMonetizationTransactor creates a new write-only instance of GasMonetization, bound to a specific deployed contract.
func NewGasMonetizationTransactor(address common.Address, transactor bind.ContractTransactor) (*GasMonetizationTransactor, error) {
	contract, err := bindGasMonetization(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationTransactor{contract: contract}, nil
}

// NewGasMonetizationFilterer creates a new log filterer instance of GasMonetization, bound to a specific deployed contract.
func NewGasMonetizationFilterer(address common.Address, filterer bind.ContractFilterer) (*GasMonetizationFilterer, error) {
	contract, err := bindGasMonetization(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationFilterer{contract: contract}, nil
}

// bindGasMonetization binds a generic wrapper to an already deployed contract.
func bindGasMonetization(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := GasMonetizationMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GasMonetization *GasMonetizationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GasMonetization.Contract.GasMonetizationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GasMonetization *GasMonetizationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GasMonetization.Contract.GasMonetizationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GasMonetization *GasMonetizationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GasMonetization.Contract.GasMonetizationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GasMonetization *GasMonetizationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _GasMonetization.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GasMonetization *GasMonetizationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GasMonetization.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GasMonetization *GasMonetizationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GasMonetization.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _GasMonetization.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _GasMonetization.Contract.DEFAULTADMINROLE(&_GasMonetization.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _GasMonetization.Contract.DEFAULTADMINROLE(&_GasMonetization.CallOpts)
}

// FUNDERROLE is a free data retrieval call binding the contract method 0x34aedecd.
//
// Solidity: function FUNDER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationCaller) FUNDERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _GasMonetization.contract.Call(opts, &out, "FUNDER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// FUNDERROLE is a free data retrieval call binding the contract method 0x34aedecd.
//
// Solidity: function FUNDER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationSession) FUNDERROLE() ([32]byte, error) {
	return _GasMonetization.Contract.FUNDERROLE(&_GasMonetization.CallOpts)
}

// FUNDERROLE is a free data retrieval call binding the contract method 0x34aedecd.
//
// Solidity: function FUNDER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationCallerSession) FUNDERROLE() ([32]byte, error) {
	return _GasMonetization.Contract.FUNDERROLE(&_GasMonetization.CallOpts)
}

// FUNDSMANAGERROLE is a free data retrieval call binding the contract method 0xc4707a83.
//
// Solidity: function FUNDS_MANAGER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationCaller) FUNDSMANAGERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _GasMonetization.contract.Call(opts, &out, "FUNDS_MANAGER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// FUNDSMANAGERROLE is a free data retrieval call binding the contract method 0xc4707a83.
//
// Solidity: function FUNDS_MANAGER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationSession) FUNDSMANAGERROLE() ([32]byte, error) {
	return _GasMonetization.Contract.FUNDSMANAGERROLE(&_GasMonetization.CallOpts)
}

// FUNDSMANAGERROLE is a free data retrieval call binding the contract method 0xc4707a83.
//
// Solidity: function FUNDS_MANAGER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationCallerSession) FUNDSMANAGERROLE() ([32]byte, error) {
	return _GasMonetization.Contract.FUNDSMANAGERROLE(&_GasMonetization.CallOpts)
}

// PROJECTSMANAGERROLE is a free data retrieval call binding the contract method 0x571e8697.
//
// Solidity: function PROJECTS_MANAGER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationCaller) PROJECTSMANAGERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _GasMonetization.contract.Call(opts, &out, "PROJECTS_MANAGER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PROJECTSMANAGERROLE is a free data retrieval call binding the contract method 0x571e8697.
//
// Solidity: function PROJECTS_MANAGER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationSession) PROJECTSMANAGERROLE() ([32]byte, error) {
	return _GasMonetization.Contract.PROJECTSMANAGERROLE(&_GasMonetization.CallOpts)
}

// PROJECTSMANAGERROLE is a free data retrieval call binding the contract method 0x571e8697.
//
// Solidity: function PROJECTS_MANAGER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationCallerSession) PROJECTSMANAGERROLE() ([32]byte, error) {
	return _GasMonetization.Contract.PROJECTSMANAGERROLE(&_GasMonetization.CallOpts)
}

// REWARDSDATAPROVIDERROLE is a free data retrieval call binding the contract method 0x9bfbca44.
//
// Solidity: function REWARDS_DATA_PROVIDER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationCaller) REWARDSDATAPROVIDERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _GasMonetization.contract.Call(opts, &out, "REWARDS_DATA_PROVIDER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// REWARDSDATAPROVIDERROLE is a free data retrieval call binding the contract method 0x9bfbca44.
//
// Solidity: function REWARDS_DATA_PROVIDER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationSession) REWARDSDATAPROVIDERROLE() ([32]byte, error) {
	return _GasMonetization.Contract.REWARDSDATAPROVIDERROLE(&_GasMonetization.CallOpts)
}

// REWARDSDATAPROVIDERROLE is a free data retrieval call binding the contract method 0x9bfbca44.
//
// Solidity: function REWARDS_DATA_PROVIDER_ROLE() view returns(bytes32)
func (_GasMonetization *GasMonetizationCallerSession) REWARDSDATAPROVIDERROLE() ([32]byte, error) {
	return _GasMonetization.Contract.REWARDSDATAPROVIDERROLE(&_GasMonetization.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_GasMonetization *GasMonetizationCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _GasMonetization.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_GasMonetization *GasMonetizationSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _GasMonetization.Contract.GetRoleAdmin(&_GasMonetization.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_GasMonetization *GasMonetizationCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _GasMonetization.Contract.GetRoleAdmin(&_GasMonetization.CallOpts, role)
}

// HasPendingWithdrawal is a free data retrieval call binding the contract method 0xd7885615.
//
// Solidity: function hasPendingWithdrawal(address owner, uint256 blockId) view returns(bool)
func (_GasMonetization *GasMonetizationCaller) HasPendingWithdrawal(opts *bind.CallOpts, owner common.Address, blockId *big.Int) (bool, error) {
	var out []interface{}
	err := _GasMonetization.contract.Call(opts, &out, "hasPendingWithdrawal", owner, blockId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasPendingWithdrawal is a free data retrieval call binding the contract method 0xd7885615.
//
// Solidity: function hasPendingWithdrawal(address owner, uint256 blockId) view returns(bool)
func (_GasMonetization *GasMonetizationSession) HasPendingWithdrawal(owner common.Address, blockId *big.Int) (bool, error) {
	return _GasMonetization.Contract.HasPendingWithdrawal(&_GasMonetization.CallOpts, owner, blockId)
}

// HasPendingWithdrawal is a free data retrieval call binding the contract method 0xd7885615.
//
// Solidity: function hasPendingWithdrawal(address owner, uint256 blockId) view returns(bool)
func (_GasMonetization *GasMonetizationCallerSession) HasPendingWithdrawal(owner common.Address, blockId *big.Int) (bool, error) {
	return _GasMonetization.Contract.HasPendingWithdrawal(&_GasMonetization.CallOpts, owner, blockId)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_GasMonetization *GasMonetizationCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _GasMonetization.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_GasMonetization *GasMonetizationSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _GasMonetization.Contract.HasRole(&_GasMonetization.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_GasMonetization *GasMonetizationCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _GasMonetization.Contract.HasRole(&_GasMonetization.CallOpts, role, account)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_GasMonetization *GasMonetizationCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _GasMonetization.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_GasMonetization *GasMonetizationSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _GasMonetization.Contract.SupportsInterface(&_GasMonetization.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_GasMonetization *GasMonetizationCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _GasMonetization.Contract.SupportsInterface(&_GasMonetization.CallOpts, interfaceId)
}

// AddFunds is a paid mutator transaction binding the contract method 0xa26759cb.
//
// Solidity: function addFunds() payable returns()
func (_GasMonetization *GasMonetizationTransactor) AddFunds(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "addFunds")
}

// AddFunds is a paid mutator transaction binding the contract method 0xa26759cb.
//
// Solidity: function addFunds() payable returns()
func (_GasMonetization *GasMonetizationSession) AddFunds() (*types.Transaction, error) {
	return _GasMonetization.Contract.AddFunds(&_GasMonetization.TransactOpts)
}

// AddFunds is a paid mutator transaction binding the contract method 0xa26759cb.
//
// Solidity: function addFunds() payable returns()
func (_GasMonetization *GasMonetizationTransactorSession) AddFunds() (*types.Transaction, error) {
	return _GasMonetization.Contract.AddFunds(&_GasMonetization.TransactOpts)
}

// AddProject is a paid mutator transaction binding the contract method 0xe9ba64a7.
//
// Solidity: function addProject(address owner, string metadataUri, address[] contracts) returns()
func (_GasMonetization *GasMonetizationTransactor) AddProject(opts *bind.TransactOpts, owner common.Address, metadataUri string, contracts []common.Address) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "addProject", owner, metadataUri, contracts)
}

// AddProject is a paid mutator transaction binding the contract method 0xe9ba64a7.
//
// Solidity: function addProject(address owner, string metadataUri, address[] contracts) returns()
func (_GasMonetization *GasMonetizationSession) AddProject(owner common.Address, metadataUri string, contracts []common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.AddProject(&_GasMonetization.TransactOpts, owner, metadataUri, contracts)
}

// AddProject is a paid mutator transaction binding the contract method 0xe9ba64a7.
//
// Solidity: function addProject(address owner, string metadataUri, address[] contracts) returns()
func (_GasMonetization *GasMonetizationTransactorSession) AddProject(owner common.Address, metadataUri string, contracts []common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.AddProject(&_GasMonetization.TransactOpts, owner, metadataUri, contracts)
}

// AddProjectContract is a paid mutator transaction binding the contract method 0x79612e3a.
//
// Solidity: function addProjectContract(address owner, address contractAddress) returns()
func (_GasMonetization *GasMonetizationTransactor) AddProjectContract(opts *bind.TransactOpts, owner common.Address, contractAddress common.Address) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "addProjectContract", owner, contractAddress)
}

// AddProjectContract is a paid mutator transaction binding the contract method 0x79612e3a.
//
// Solidity: function addProjectContract(address owner, address contractAddress) returns()
func (_GasMonetization *GasMonetizationSession) AddProjectContract(owner common.Address, contractAddress common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.AddProjectContract(&_GasMonetization.TransactOpts, owner, contractAddress)
}

// AddProjectContract is a paid mutator transaction binding the contract method 0x79612e3a.
//
// Solidity: function addProjectContract(address owner, address contractAddress) returns()
func (_GasMonetization *GasMonetizationTransactorSession) AddProjectContract(owner common.Address, contractAddress common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.AddProjectContract(&_GasMonetization.TransactOpts, owner, contractAddress)
}

// CompleteWithdrawal is a paid mutator transaction binding the contract method 0xfc07244f.
//
// Solidity: function completeWithdrawal(address owner, uint256 blockNumber, uint256 amount) returns()
func (_GasMonetization *GasMonetizationTransactor) CompleteWithdrawal(opts *bind.TransactOpts, owner common.Address, blockNumber *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "completeWithdrawal", owner, blockNumber, amount)
}

// CompleteWithdrawal is a paid mutator transaction binding the contract method 0xfc07244f.
//
// Solidity: function completeWithdrawal(address owner, uint256 blockNumber, uint256 amount) returns()
func (_GasMonetization *GasMonetizationSession) CompleteWithdrawal(owner common.Address, blockNumber *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _GasMonetization.Contract.CompleteWithdrawal(&_GasMonetization.TransactOpts, owner, blockNumber, amount)
}

// CompleteWithdrawal is a paid mutator transaction binding the contract method 0xfc07244f.
//
// Solidity: function completeWithdrawal(address owner, uint256 blockNumber, uint256 amount) returns()
func (_GasMonetization *GasMonetizationTransactorSession) CompleteWithdrawal(owner common.Address, blockNumber *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _GasMonetization.Contract.CompleteWithdrawal(&_GasMonetization.TransactOpts, owner, blockNumber, amount)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_GasMonetization *GasMonetizationTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_GasMonetization *GasMonetizationSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.GrantRole(&_GasMonetization.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_GasMonetization *GasMonetizationTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.GrantRole(&_GasMonetization.TransactOpts, role, account)
}

// RemoveProject is a paid mutator transaction binding the contract method 0x0c0ad299.
//
// Solidity: function removeProject(address owner) returns()
func (_GasMonetization *GasMonetizationTransactor) RemoveProject(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "removeProject", owner)
}

// RemoveProject is a paid mutator transaction binding the contract method 0x0c0ad299.
//
// Solidity: function removeProject(address owner) returns()
func (_GasMonetization *GasMonetizationSession) RemoveProject(owner common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.RemoveProject(&_GasMonetization.TransactOpts, owner)
}

// RemoveProject is a paid mutator transaction binding the contract method 0x0c0ad299.
//
// Solidity: function removeProject(address owner) returns()
func (_GasMonetization *GasMonetizationTransactorSession) RemoveProject(owner common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.RemoveProject(&_GasMonetization.TransactOpts, owner)
}

// RemoveProjectContract is a paid mutator transaction binding the contract method 0x3449b5b4.
//
// Solidity: function removeProjectContract(address owner, address contractAddress) returns()
func (_GasMonetization *GasMonetizationTransactor) RemoveProjectContract(opts *bind.TransactOpts, owner common.Address, contractAddress common.Address) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "removeProjectContract", owner, contractAddress)
}

// RemoveProjectContract is a paid mutator transaction binding the contract method 0x3449b5b4.
//
// Solidity: function removeProjectContract(address owner, address contractAddress) returns()
func (_GasMonetization *GasMonetizationSession) RemoveProjectContract(owner common.Address, contractAddress common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.RemoveProjectContract(&_GasMonetization.TransactOpts, owner, contractAddress)
}

// RemoveProjectContract is a paid mutator transaction binding the contract method 0x3449b5b4.
//
// Solidity: function removeProjectContract(address owner, address contractAddress) returns()
func (_GasMonetization *GasMonetizationTransactorSession) RemoveProjectContract(owner common.Address, contractAddress common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.RemoveProjectContract(&_GasMonetization.TransactOpts, owner, contractAddress)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_GasMonetization *GasMonetizationTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_GasMonetization *GasMonetizationSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.RenounceRole(&_GasMonetization.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_GasMonetization *GasMonetizationTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.RenounceRole(&_GasMonetization.TransactOpts, role, account)
}

// RequestWithdrawal is a paid mutator transaction binding the contract method 0xdbaf2145.
//
// Solidity: function requestWithdrawal() returns()
func (_GasMonetization *GasMonetizationTransactor) RequestWithdrawal(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "requestWithdrawal")
}

// RequestWithdrawal is a paid mutator transaction binding the contract method 0xdbaf2145.
//
// Solidity: function requestWithdrawal() returns()
func (_GasMonetization *GasMonetizationSession) RequestWithdrawal() (*types.Transaction, error) {
	return _GasMonetization.Contract.RequestWithdrawal(&_GasMonetization.TransactOpts)
}

// RequestWithdrawal is a paid mutator transaction binding the contract method 0xdbaf2145.
//
// Solidity: function requestWithdrawal() returns()
func (_GasMonetization *GasMonetizationTransactorSession) RequestWithdrawal() (*types.Transaction, error) {
	return _GasMonetization.Contract.RequestWithdrawal(&_GasMonetization.TransactOpts)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_GasMonetization *GasMonetizationTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_GasMonetization *GasMonetizationSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.RevokeRole(&_GasMonetization.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_GasMonetization *GasMonetizationTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.RevokeRole(&_GasMonetization.TransactOpts, role, account)
}

// SetProjectContracts is a paid mutator transaction binding the contract method 0xa6db775b.
//
// Solidity: function setProjectContracts(address owner, address[] contracts) returns()
func (_GasMonetization *GasMonetizationTransactor) SetProjectContracts(opts *bind.TransactOpts, owner common.Address, contracts []common.Address) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "setProjectContracts", owner, contracts)
}

// SetProjectContracts is a paid mutator transaction binding the contract method 0xa6db775b.
//
// Solidity: function setProjectContracts(address owner, address[] contracts) returns()
func (_GasMonetization *GasMonetizationSession) SetProjectContracts(owner common.Address, contracts []common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.SetProjectContracts(&_GasMonetization.TransactOpts, owner, contracts)
}

// SetProjectContracts is a paid mutator transaction binding the contract method 0xa6db775b.
//
// Solidity: function setProjectContracts(address owner, address[] contracts) returns()
func (_GasMonetization *GasMonetizationTransactorSession) SetProjectContracts(owner common.Address, contracts []common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.SetProjectContracts(&_GasMonetization.TransactOpts, owner, contracts)
}

// UpdateProjectMetadataUri is a paid mutator transaction binding the contract method 0x191ba54e.
//
// Solidity: function updateProjectMetadataUri(address owner, string metadataUri) returns()
func (_GasMonetization *GasMonetizationTransactor) UpdateProjectMetadataUri(opts *bind.TransactOpts, owner common.Address, metadataUri string) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "updateProjectMetadataUri", owner, metadataUri)
}

// UpdateProjectMetadataUri is a paid mutator transaction binding the contract method 0x191ba54e.
//
// Solidity: function updateProjectMetadataUri(address owner, string metadataUri) returns()
func (_GasMonetization *GasMonetizationSession) UpdateProjectMetadataUri(owner common.Address, metadataUri string) (*types.Transaction, error) {
	return _GasMonetization.Contract.UpdateProjectMetadataUri(&_GasMonetization.TransactOpts, owner, metadataUri)
}

// UpdateProjectMetadataUri is a paid mutator transaction binding the contract method 0x191ba54e.
//
// Solidity: function updateProjectMetadataUri(address owner, string metadataUri) returns()
func (_GasMonetization *GasMonetizationTransactorSession) UpdateProjectMetadataUri(owner common.Address, metadataUri string) (*types.Transaction, error) {
	return _GasMonetization.Contract.UpdateProjectMetadataUri(&_GasMonetization.TransactOpts, owner, metadataUri)
}

// UpdateWithdrawalAllowedConfirmationsDeviation is a paid mutator transaction binding the contract method 0x3c18315e.
//
// Solidity: function updateWithdrawalAllowedConfirmationsDeviation(uint256 limit) returns()
func (_GasMonetization *GasMonetizationTransactor) UpdateWithdrawalAllowedConfirmationsDeviation(opts *bind.TransactOpts, limit *big.Int) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "updateWithdrawalAllowedConfirmationsDeviation", limit)
}

// UpdateWithdrawalAllowedConfirmationsDeviation is a paid mutator transaction binding the contract method 0x3c18315e.
//
// Solidity: function updateWithdrawalAllowedConfirmationsDeviation(uint256 limit) returns()
func (_GasMonetization *GasMonetizationSession) UpdateWithdrawalAllowedConfirmationsDeviation(limit *big.Int) (*types.Transaction, error) {
	return _GasMonetization.Contract.UpdateWithdrawalAllowedConfirmationsDeviation(&_GasMonetization.TransactOpts, limit)
}

// UpdateWithdrawalAllowedConfirmationsDeviation is a paid mutator transaction binding the contract method 0x3c18315e.
//
// Solidity: function updateWithdrawalAllowedConfirmationsDeviation(uint256 limit) returns()
func (_GasMonetization *GasMonetizationTransactorSession) UpdateWithdrawalAllowedConfirmationsDeviation(limit *big.Int) (*types.Transaction, error) {
	return _GasMonetization.Contract.UpdateWithdrawalAllowedConfirmationsDeviation(&_GasMonetization.TransactOpts, limit)
}

// UpdateWithdrawalBlocksFrequencyLimit is a paid mutator transaction binding the contract method 0xc11173fe.
//
// Solidity: function updateWithdrawalBlocksFrequencyLimit(uint256 limit) returns()
func (_GasMonetization *GasMonetizationTransactor) UpdateWithdrawalBlocksFrequencyLimit(opts *bind.TransactOpts, limit *big.Int) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "updateWithdrawalBlocksFrequencyLimit", limit)
}

// UpdateWithdrawalBlocksFrequencyLimit is a paid mutator transaction binding the contract method 0xc11173fe.
//
// Solidity: function updateWithdrawalBlocksFrequencyLimit(uint256 limit) returns()
func (_GasMonetization *GasMonetizationSession) UpdateWithdrawalBlocksFrequencyLimit(limit *big.Int) (*types.Transaction, error) {
	return _GasMonetization.Contract.UpdateWithdrawalBlocksFrequencyLimit(&_GasMonetization.TransactOpts, limit)
}

// UpdateWithdrawalBlocksFrequencyLimit is a paid mutator transaction binding the contract method 0xc11173fe.
//
// Solidity: function updateWithdrawalBlocksFrequencyLimit(uint256 limit) returns()
func (_GasMonetization *GasMonetizationTransactorSession) UpdateWithdrawalBlocksFrequencyLimit(limit *big.Int) (*types.Transaction, error) {
	return _GasMonetization.Contract.UpdateWithdrawalBlocksFrequencyLimit(&_GasMonetization.TransactOpts, limit)
}

// UpdateWithdrawalConfirmationsLimit is a paid mutator transaction binding the contract method 0xa210106f.
//
// Solidity: function updateWithdrawalConfirmationsLimit(uint256 limit) returns()
func (_GasMonetization *GasMonetizationTransactor) UpdateWithdrawalConfirmationsLimit(opts *bind.TransactOpts, limit *big.Int) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "updateWithdrawalConfirmationsLimit", limit)
}

// UpdateWithdrawalConfirmationsLimit is a paid mutator transaction binding the contract method 0xa210106f.
//
// Solidity: function updateWithdrawalConfirmationsLimit(uint256 limit) returns()
func (_GasMonetization *GasMonetizationSession) UpdateWithdrawalConfirmationsLimit(limit *big.Int) (*types.Transaction, error) {
	return _GasMonetization.Contract.UpdateWithdrawalConfirmationsLimit(&_GasMonetization.TransactOpts, limit)
}

// UpdateWithdrawalConfirmationsLimit is a paid mutator transaction binding the contract method 0xa210106f.
//
// Solidity: function updateWithdrawalConfirmationsLimit(uint256 limit) returns()
func (_GasMonetization *GasMonetizationTransactorSession) UpdateWithdrawalConfirmationsLimit(limit *big.Int) (*types.Transaction, error) {
	return _GasMonetization.Contract.UpdateWithdrawalConfirmationsLimit(&_GasMonetization.TransactOpts, limit)
}

// WithdrawAllFunds is a paid mutator transaction binding the contract method 0x32dee40b.
//
// Solidity: function withdrawAllFunds(address recipient) returns()
func (_GasMonetization *GasMonetizationTransactor) WithdrawAllFunds(opts *bind.TransactOpts, recipient common.Address) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "withdrawAllFunds", recipient)
}

// WithdrawAllFunds is a paid mutator transaction binding the contract method 0x32dee40b.
//
// Solidity: function withdrawAllFunds(address recipient) returns()
func (_GasMonetization *GasMonetizationSession) WithdrawAllFunds(recipient common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.WithdrawAllFunds(&_GasMonetization.TransactOpts, recipient)
}

// WithdrawAllFunds is a paid mutator transaction binding the contract method 0x32dee40b.
//
// Solidity: function withdrawAllFunds(address recipient) returns()
func (_GasMonetization *GasMonetizationTransactorSession) WithdrawAllFunds(recipient common.Address) (*types.Transaction, error) {
	return _GasMonetization.Contract.WithdrawAllFunds(&_GasMonetization.TransactOpts, recipient)
}

// WithdrawFunds is a paid mutator transaction binding the contract method 0xc1075329.
//
// Solidity: function withdrawFunds(address recipient, uint256 amount) returns()
func (_GasMonetization *GasMonetizationTransactor) WithdrawFunds(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _GasMonetization.contract.Transact(opts, "withdrawFunds", recipient, amount)
}

// WithdrawFunds is a paid mutator transaction binding the contract method 0xc1075329.
//
// Solidity: function withdrawFunds(address recipient, uint256 amount) returns()
func (_GasMonetization *GasMonetizationSession) WithdrawFunds(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _GasMonetization.Contract.WithdrawFunds(&_GasMonetization.TransactOpts, recipient, amount)
}

// WithdrawFunds is a paid mutator transaction binding the contract method 0xc1075329.
//
// Solidity: function withdrawFunds(address recipient, uint256 amount) returns()
func (_GasMonetization *GasMonetizationTransactorSession) WithdrawFunds(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _GasMonetization.Contract.WithdrawFunds(&_GasMonetization.TransactOpts, recipient, amount)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_GasMonetization *GasMonetizationTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GasMonetization.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_GasMonetization *GasMonetizationSession) Receive() (*types.Transaction, error) {
	return _GasMonetization.Contract.Receive(&_GasMonetization.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_GasMonetization *GasMonetizationTransactorSession) Receive() (*types.Transaction, error) {
	return _GasMonetization.Contract.Receive(&_GasMonetization.TransactOpts)
}

// GasMonetizationContractDeployedIterator is returned from FilterContractDeployed and is used to iterate over the raw logs and unpacked data for ContractDeployed events raised by the GasMonetization contract.
type GasMonetizationContractDeployedIterator struct {
	Event *GasMonetizationContractDeployed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationContractDeployedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationContractDeployed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationContractDeployed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationContractDeployedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationContractDeployedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationContractDeployed represents a ContractDeployed event raised by the GasMonetization contract.
type GasMonetizationContractDeployed struct {
	WithdrawalBlocksFrequencyLimit *big.Int
	ConfirmationsToMakeWithdrawal  *big.Int
	AllowedConfirmationsDeviation  *big.Int
	Raw                            types.Log // Blockchain specific contextual infos
}

// FilterContractDeployed is a free log retrieval operation binding the contract event 0x9d6e529b64d0156dc8d51fd7a5e9e2c55ce73d15e239849a3a796f7e1c33ec81.
//
// Solidity: event ContractDeployed(uint256 withdrawalBlocksFrequencyLimit, uint256 confirmationsToMakeWithdrawal, uint256 allowedConfirmationsDeviation)
func (_GasMonetization *GasMonetizationFilterer) FilterContractDeployed(opts *bind.FilterOpts) (*GasMonetizationContractDeployedIterator, error) {

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "ContractDeployed")
	if err != nil {
		return nil, err
	}
	return &GasMonetizationContractDeployedIterator{contract: _GasMonetization.contract, event: "ContractDeployed", logs: logs, sub: sub}, nil
}

// WatchContractDeployed is a free log subscription operation binding the contract event 0x9d6e529b64d0156dc8d51fd7a5e9e2c55ce73d15e239849a3a796f7e1c33ec81.
//
// Solidity: event ContractDeployed(uint256 withdrawalBlocksFrequencyLimit, uint256 confirmationsToMakeWithdrawal, uint256 allowedConfirmationsDeviation)
func (_GasMonetization *GasMonetizationFilterer) WatchContractDeployed(opts *bind.WatchOpts, sink chan<- *GasMonetizationContractDeployed) (event.Subscription, error) {

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "ContractDeployed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationContractDeployed)
				if err := _GasMonetization.contract.UnpackLog(event, "ContractDeployed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContractDeployed is a log parse operation binding the contract event 0x9d6e529b64d0156dc8d51fd7a5e9e2c55ce73d15e239849a3a796f7e1c33ec81.
//
// Solidity: event ContractDeployed(uint256 withdrawalBlocksFrequencyLimit, uint256 confirmationsToMakeWithdrawal, uint256 allowedConfirmationsDeviation)
func (_GasMonetization *GasMonetizationFilterer) ParseContractDeployed(log types.Log) (*GasMonetizationContractDeployed, error) {
	event := new(GasMonetizationContractDeployed)
	if err := _GasMonetization.contract.UnpackLog(event, "ContractDeployed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationFundsAddedIterator is returned from FilterFundsAdded and is used to iterate over the raw logs and unpacked data for FundsAdded events raised by the GasMonetization contract.
type GasMonetizationFundsAddedIterator struct {
	Event *GasMonetizationFundsAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationFundsAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationFundsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationFundsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationFundsAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationFundsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationFundsAdded represents a FundsAdded event raised by the GasMonetization contract.
type GasMonetizationFundsAdded struct {
	Funder common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterFundsAdded is a free log retrieval operation binding the contract event 0x8fe10ae416f22f5e5220b0018a6c1d4ff534d6aa3a471f2a20cb7747fe63e5b9.
//
// Solidity: event FundsAdded(address indexed funder, uint256 amount)
func (_GasMonetization *GasMonetizationFilterer) FilterFundsAdded(opts *bind.FilterOpts, funder []common.Address) (*GasMonetizationFundsAddedIterator, error) {

	var funderRule []interface{}
	for _, funderItem := range funder {
		funderRule = append(funderRule, funderItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "FundsAdded", funderRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationFundsAddedIterator{contract: _GasMonetization.contract, event: "FundsAdded", logs: logs, sub: sub}, nil
}

// WatchFundsAdded is a free log subscription operation binding the contract event 0x8fe10ae416f22f5e5220b0018a6c1d4ff534d6aa3a471f2a20cb7747fe63e5b9.
//
// Solidity: event FundsAdded(address indexed funder, uint256 amount)
func (_GasMonetization *GasMonetizationFilterer) WatchFundsAdded(opts *bind.WatchOpts, sink chan<- *GasMonetizationFundsAdded, funder []common.Address) (event.Subscription, error) {

	var funderRule []interface{}
	for _, funderItem := range funder {
		funderRule = append(funderRule, funderItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "FundsAdded", funderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationFundsAdded)
				if err := _GasMonetization.contract.UnpackLog(event, "FundsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsAdded is a log parse operation binding the contract event 0x8fe10ae416f22f5e5220b0018a6c1d4ff534d6aa3a471f2a20cb7747fe63e5b9.
//
// Solidity: event FundsAdded(address indexed funder, uint256 amount)
func (_GasMonetization *GasMonetizationFilterer) ParseFundsAdded(log types.Log) (*GasMonetizationFundsAdded, error) {
	event := new(GasMonetizationFundsAdded)
	if err := _GasMonetization.contract.UnpackLog(event, "FundsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationFundsWithdrawnIterator is returned from FilterFundsWithdrawn and is used to iterate over the raw logs and unpacked data for FundsWithdrawn events raised by the GasMonetization contract.
type GasMonetizationFundsWithdrawnIterator struct {
	Event *GasMonetizationFundsWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationFundsWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationFundsWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationFundsWithdrawn represents a FundsWithdrawn event raised by the GasMonetization contract.
type GasMonetizationFundsWithdrawn struct {
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterFundsWithdrawn is a free log retrieval operation binding the contract event 0xeaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d.
//
// Solidity: event FundsWithdrawn(address indexed recipient, uint256 amount)
func (_GasMonetization *GasMonetizationFilterer) FilterFundsWithdrawn(opts *bind.FilterOpts, recipient []common.Address) (*GasMonetizationFundsWithdrawnIterator, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "FundsWithdrawn", recipientRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationFundsWithdrawnIterator{contract: _GasMonetization.contract, event: "FundsWithdrawn", logs: logs, sub: sub}, nil
}

// WatchFundsWithdrawn is a free log subscription operation binding the contract event 0xeaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d.
//
// Solidity: event FundsWithdrawn(address indexed recipient, uint256 amount)
func (_GasMonetization *GasMonetizationFilterer) WatchFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *GasMonetizationFundsWithdrawn, recipient []common.Address) (event.Subscription, error) {

	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "FundsWithdrawn", recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationFundsWithdrawn)
				if err := _GasMonetization.contract.UnpackLog(event, "FundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFundsWithdrawn is a log parse operation binding the contract event 0xeaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d.
//
// Solidity: event FundsWithdrawn(address indexed recipient, uint256 amount)
func (_GasMonetization *GasMonetizationFilterer) ParseFundsWithdrawn(log types.Log) (*GasMonetizationFundsWithdrawn, error) {
	event := new(GasMonetizationFundsWithdrawn)
	if err := _GasMonetization.contract.UnpackLog(event, "FundsWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationProjectAddedIterator is returned from FilterProjectAdded and is used to iterate over the raw logs and unpacked data for ProjectAdded events raised by the GasMonetization contract.
type GasMonetizationProjectAddedIterator struct {
	Event *GasMonetizationProjectAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationProjectAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationProjectAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationProjectAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationProjectAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationProjectAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationProjectAdded represents a ProjectAdded event raised by the GasMonetization contract.
type GasMonetizationProjectAdded struct {
	Owner       common.Address
	MetadataUri string
	Contracts   []common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProjectAdded is a free log retrieval operation binding the contract event 0xd67e812e4046dc0df638cf5dd5e6eb8ae397a13d7a9da0090a65742b6fd91d71.
//
// Solidity: event ProjectAdded(address indexed owner, string metadataUri, address[] contracts)
func (_GasMonetization *GasMonetizationFilterer) FilterProjectAdded(opts *bind.FilterOpts, owner []common.Address) (*GasMonetizationProjectAddedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "ProjectAdded", ownerRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationProjectAddedIterator{contract: _GasMonetization.contract, event: "ProjectAdded", logs: logs, sub: sub}, nil
}

// WatchProjectAdded is a free log subscription operation binding the contract event 0xd67e812e4046dc0df638cf5dd5e6eb8ae397a13d7a9da0090a65742b6fd91d71.
//
// Solidity: event ProjectAdded(address indexed owner, string metadataUri, address[] contracts)
func (_GasMonetization *GasMonetizationFilterer) WatchProjectAdded(opts *bind.WatchOpts, sink chan<- *GasMonetizationProjectAdded, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "ProjectAdded", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationProjectAdded)
				if err := _GasMonetization.contract.UnpackLog(event, "ProjectAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectAdded is a log parse operation binding the contract event 0xd67e812e4046dc0df638cf5dd5e6eb8ae397a13d7a9da0090a65742b6fd91d71.
//
// Solidity: event ProjectAdded(address indexed owner, string metadataUri, address[] contracts)
func (_GasMonetization *GasMonetizationFilterer) ParseProjectAdded(log types.Log) (*GasMonetizationProjectAdded, error) {
	event := new(GasMonetizationProjectAdded)
	if err := _GasMonetization.contract.UnpackLog(event, "ProjectAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationProjectContractAddedIterator is returned from FilterProjectContractAdded and is used to iterate over the raw logs and unpacked data for ProjectContractAdded events raised by the GasMonetization contract.
type GasMonetizationProjectContractAddedIterator struct {
	Event *GasMonetizationProjectContractAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationProjectContractAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationProjectContractAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationProjectContractAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationProjectContractAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationProjectContractAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationProjectContractAdded represents a ProjectContractAdded event raised by the GasMonetization contract.
type GasMonetizationProjectContractAdded struct {
	Owner           common.Address
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterProjectContractAdded is a free log retrieval operation binding the contract event 0x7c1a186c94610c708ec37b603a7b15fc83037e1e1899d0738c534a22407d878f.
//
// Solidity: event ProjectContractAdded(address indexed owner, address indexed contractAddress)
func (_GasMonetization *GasMonetizationFilterer) FilterProjectContractAdded(opts *bind.FilterOpts, owner []common.Address, contractAddress []common.Address) (*GasMonetizationProjectContractAddedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "ProjectContractAdded", ownerRule, contractAddressRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationProjectContractAddedIterator{contract: _GasMonetization.contract, event: "ProjectContractAdded", logs: logs, sub: sub}, nil
}

// WatchProjectContractAdded is a free log subscription operation binding the contract event 0x7c1a186c94610c708ec37b603a7b15fc83037e1e1899d0738c534a22407d878f.
//
// Solidity: event ProjectContractAdded(address indexed owner, address indexed contractAddress)
func (_GasMonetization *GasMonetizationFilterer) WatchProjectContractAdded(opts *bind.WatchOpts, sink chan<- *GasMonetizationProjectContractAdded, owner []common.Address, contractAddress []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "ProjectContractAdded", ownerRule, contractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationProjectContractAdded)
				if err := _GasMonetization.contract.UnpackLog(event, "ProjectContractAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectContractAdded is a log parse operation binding the contract event 0x7c1a186c94610c708ec37b603a7b15fc83037e1e1899d0738c534a22407d878f.
//
// Solidity: event ProjectContractAdded(address indexed owner, address indexed contractAddress)
func (_GasMonetization *GasMonetizationFilterer) ParseProjectContractAdded(log types.Log) (*GasMonetizationProjectContractAdded, error) {
	event := new(GasMonetizationProjectContractAdded)
	if err := _GasMonetization.contract.UnpackLog(event, "ProjectContractAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationProjectContractRemovedIterator is returned from FilterProjectContractRemoved and is used to iterate over the raw logs and unpacked data for ProjectContractRemoved events raised by the GasMonetization contract.
type GasMonetizationProjectContractRemovedIterator struct {
	Event *GasMonetizationProjectContractRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationProjectContractRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationProjectContractRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationProjectContractRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationProjectContractRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationProjectContractRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationProjectContractRemoved represents a ProjectContractRemoved event raised by the GasMonetization contract.
type GasMonetizationProjectContractRemoved struct {
	Owner           common.Address
	ContractAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterProjectContractRemoved is a free log retrieval operation binding the contract event 0x7e34a46ef4198698665986c9eda106ae01cd62c67a1ddd1995516462aa771393.
//
// Solidity: event ProjectContractRemoved(address indexed owner, address indexed contractAddress)
func (_GasMonetization *GasMonetizationFilterer) FilterProjectContractRemoved(opts *bind.FilterOpts, owner []common.Address, contractAddress []common.Address) (*GasMonetizationProjectContractRemovedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "ProjectContractRemoved", ownerRule, contractAddressRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationProjectContractRemovedIterator{contract: _GasMonetization.contract, event: "ProjectContractRemoved", logs: logs, sub: sub}, nil
}

// WatchProjectContractRemoved is a free log subscription operation binding the contract event 0x7e34a46ef4198698665986c9eda106ae01cd62c67a1ddd1995516462aa771393.
//
// Solidity: event ProjectContractRemoved(address indexed owner, address indexed contractAddress)
func (_GasMonetization *GasMonetizationFilterer) WatchProjectContractRemoved(opts *bind.WatchOpts, sink chan<- *GasMonetizationProjectContractRemoved, owner []common.Address, contractAddress []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "ProjectContractRemoved", ownerRule, contractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationProjectContractRemoved)
				if err := _GasMonetization.contract.UnpackLog(event, "ProjectContractRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectContractRemoved is a log parse operation binding the contract event 0x7e34a46ef4198698665986c9eda106ae01cd62c67a1ddd1995516462aa771393.
//
// Solidity: event ProjectContractRemoved(address indexed owner, address indexed contractAddress)
func (_GasMonetization *GasMonetizationFilterer) ParseProjectContractRemoved(log types.Log) (*GasMonetizationProjectContractRemoved, error) {
	event := new(GasMonetizationProjectContractRemoved)
	if err := _GasMonetization.contract.UnpackLog(event, "ProjectContractRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationProjectContractsSetIterator is returned from FilterProjectContractsSet and is used to iterate over the raw logs and unpacked data for ProjectContractsSet events raised by the GasMonetization contract.
type GasMonetizationProjectContractsSetIterator struct {
	Event *GasMonetizationProjectContractsSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationProjectContractsSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationProjectContractsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationProjectContractsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationProjectContractsSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationProjectContractsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationProjectContractsSet represents a ProjectContractsSet event raised by the GasMonetization contract.
type GasMonetizationProjectContractsSet struct {
	Owner     common.Address
	Contracts []common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterProjectContractsSet is a free log retrieval operation binding the contract event 0xc34d634fde0d2a5084f7dec1eb890b6baa5c469e189c988371c2078d82d8a0b3.
//
// Solidity: event ProjectContractsSet(address indexed owner, address[] contracts)
func (_GasMonetization *GasMonetizationFilterer) FilterProjectContractsSet(opts *bind.FilterOpts, owner []common.Address) (*GasMonetizationProjectContractsSetIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "ProjectContractsSet", ownerRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationProjectContractsSetIterator{contract: _GasMonetization.contract, event: "ProjectContractsSet", logs: logs, sub: sub}, nil
}

// WatchProjectContractsSet is a free log subscription operation binding the contract event 0xc34d634fde0d2a5084f7dec1eb890b6baa5c469e189c988371c2078d82d8a0b3.
//
// Solidity: event ProjectContractsSet(address indexed owner, address[] contracts)
func (_GasMonetization *GasMonetizationFilterer) WatchProjectContractsSet(opts *bind.WatchOpts, sink chan<- *GasMonetizationProjectContractsSet, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "ProjectContractsSet", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationProjectContractsSet)
				if err := _GasMonetization.contract.UnpackLog(event, "ProjectContractsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectContractsSet is a log parse operation binding the contract event 0xc34d634fde0d2a5084f7dec1eb890b6baa5c469e189c988371c2078d82d8a0b3.
//
// Solidity: event ProjectContractsSet(address indexed owner, address[] contracts)
func (_GasMonetization *GasMonetizationFilterer) ParseProjectContractsSet(log types.Log) (*GasMonetizationProjectContractsSet, error) {
	event := new(GasMonetizationProjectContractsSet)
	if err := _GasMonetization.contract.UnpackLog(event, "ProjectContractsSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationProjectMetadataUriUpdatedIterator is returned from FilterProjectMetadataUriUpdated and is used to iterate over the raw logs and unpacked data for ProjectMetadataUriUpdated events raised by the GasMonetization contract.
type GasMonetizationProjectMetadataUriUpdatedIterator struct {
	Event *GasMonetizationProjectMetadataUriUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationProjectMetadataUriUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationProjectMetadataUriUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationProjectMetadataUriUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationProjectMetadataUriUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationProjectMetadataUriUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationProjectMetadataUriUpdated represents a ProjectMetadataUriUpdated event raised by the GasMonetization contract.
type GasMonetizationProjectMetadataUriUpdated struct {
	Owner       common.Address
	MetadataUri string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProjectMetadataUriUpdated is a free log retrieval operation binding the contract event 0x314a36dc8be566f41b94f41a0a6e3246b42dd5d4169ed073ebea2e3973a13a99.
//
// Solidity: event ProjectMetadataUriUpdated(address indexed owner, string metadataUri)
func (_GasMonetization *GasMonetizationFilterer) FilterProjectMetadataUriUpdated(opts *bind.FilterOpts, owner []common.Address) (*GasMonetizationProjectMetadataUriUpdatedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "ProjectMetadataUriUpdated", ownerRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationProjectMetadataUriUpdatedIterator{contract: _GasMonetization.contract, event: "ProjectMetadataUriUpdated", logs: logs, sub: sub}, nil
}

// WatchProjectMetadataUriUpdated is a free log subscription operation binding the contract event 0x314a36dc8be566f41b94f41a0a6e3246b42dd5d4169ed073ebea2e3973a13a99.
//
// Solidity: event ProjectMetadataUriUpdated(address indexed owner, string metadataUri)
func (_GasMonetization *GasMonetizationFilterer) WatchProjectMetadataUriUpdated(opts *bind.WatchOpts, sink chan<- *GasMonetizationProjectMetadataUriUpdated, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "ProjectMetadataUriUpdated", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationProjectMetadataUriUpdated)
				if err := _GasMonetization.contract.UnpackLog(event, "ProjectMetadataUriUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectMetadataUriUpdated is a log parse operation binding the contract event 0x314a36dc8be566f41b94f41a0a6e3246b42dd5d4169ed073ebea2e3973a13a99.
//
// Solidity: event ProjectMetadataUriUpdated(address indexed owner, string metadataUri)
func (_GasMonetization *GasMonetizationFilterer) ParseProjectMetadataUriUpdated(log types.Log) (*GasMonetizationProjectMetadataUriUpdated, error) {
	event := new(GasMonetizationProjectMetadataUriUpdated)
	if err := _GasMonetization.contract.UnpackLog(event, "ProjectMetadataUriUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationProjectRemovedIterator is returned from FilterProjectRemoved and is used to iterate over the raw logs and unpacked data for ProjectRemoved events raised by the GasMonetization contract.
type GasMonetizationProjectRemovedIterator struct {
	Event *GasMonetizationProjectRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationProjectRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationProjectRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationProjectRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationProjectRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationProjectRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationProjectRemoved represents a ProjectRemoved event raised by the GasMonetization contract.
type GasMonetizationProjectRemoved struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterProjectRemoved is a free log retrieval operation binding the contract event 0x6c2a7bedc1e997c07f41aff265f8b77df645943615e2b039fb2b1f2be37b67da.
//
// Solidity: event ProjectRemoved(address indexed owner)
func (_GasMonetization *GasMonetizationFilterer) FilterProjectRemoved(opts *bind.FilterOpts, owner []common.Address) (*GasMonetizationProjectRemovedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "ProjectRemoved", ownerRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationProjectRemovedIterator{contract: _GasMonetization.contract, event: "ProjectRemoved", logs: logs, sub: sub}, nil
}

// WatchProjectRemoved is a free log subscription operation binding the contract event 0x6c2a7bedc1e997c07f41aff265f8b77df645943615e2b039fb2b1f2be37b67da.
//
// Solidity: event ProjectRemoved(address indexed owner)
func (_GasMonetization *GasMonetizationFilterer) WatchProjectRemoved(opts *bind.WatchOpts, sink chan<- *GasMonetizationProjectRemoved, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "ProjectRemoved", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationProjectRemoved)
				if err := _GasMonetization.contract.UnpackLog(event, "ProjectRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectRemoved is a log parse operation binding the contract event 0x6c2a7bedc1e997c07f41aff265f8b77df645943615e2b039fb2b1f2be37b67da.
//
// Solidity: event ProjectRemoved(address indexed owner)
func (_GasMonetization *GasMonetizationFilterer) ParseProjectRemoved(log types.Log) (*GasMonetizationProjectRemoved, error) {
	event := new(GasMonetizationProjectRemoved)
	if err := _GasMonetization.contract.UnpackLog(event, "ProjectRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the GasMonetization contract.
type GasMonetizationRoleAdminChangedIterator struct {
	Event *GasMonetizationRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationRoleAdminChanged represents a RoleAdminChanged event raised by the GasMonetization contract.
type GasMonetizationRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_GasMonetization *GasMonetizationFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*GasMonetizationRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationRoleAdminChangedIterator{contract: _GasMonetization.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_GasMonetization *GasMonetizationFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *GasMonetizationRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationRoleAdminChanged)
				if err := _GasMonetization.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_GasMonetization *GasMonetizationFilterer) ParseRoleAdminChanged(log types.Log) (*GasMonetizationRoleAdminChanged, error) {
	event := new(GasMonetizationRoleAdminChanged)
	if err := _GasMonetization.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the GasMonetization contract.
type GasMonetizationRoleGrantedIterator struct {
	Event *GasMonetizationRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationRoleGranted represents a RoleGranted event raised by the GasMonetization contract.
type GasMonetizationRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_GasMonetization *GasMonetizationFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*GasMonetizationRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationRoleGrantedIterator{contract: _GasMonetization.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_GasMonetization *GasMonetizationFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *GasMonetizationRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationRoleGranted)
				if err := _GasMonetization.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_GasMonetization *GasMonetizationFilterer) ParseRoleGranted(log types.Log) (*GasMonetizationRoleGranted, error) {
	event := new(GasMonetizationRoleGranted)
	if err := _GasMonetization.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the GasMonetization contract.
type GasMonetizationRoleRevokedIterator struct {
	Event *GasMonetizationRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationRoleRevoked represents a RoleRevoked event raised by the GasMonetization contract.
type GasMonetizationRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_GasMonetization *GasMonetizationFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*GasMonetizationRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationRoleRevokedIterator{contract: _GasMonetization.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_GasMonetization *GasMonetizationFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *GasMonetizationRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationRoleRevoked)
				if err := _GasMonetization.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_GasMonetization *GasMonetizationFilterer) ParseRoleRevoked(log types.Log) (*GasMonetizationRoleRevoked, error) {
	event := new(GasMonetizationRoleRevoked)
	if err := _GasMonetization.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationWithdrawalBlockLimitUpdatedIterator is returned from FilterWithdrawalBlockLimitUpdated and is used to iterate over the raw logs and unpacked data for WithdrawalBlockLimitUpdated events raised by the GasMonetization contract.
type GasMonetizationWithdrawalBlockLimitUpdatedIterator struct {
	Event *GasMonetizationWithdrawalBlockLimitUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationWithdrawalBlockLimitUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationWithdrawalBlockLimitUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationWithdrawalBlockLimitUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationWithdrawalBlockLimitUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationWithdrawalBlockLimitUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationWithdrawalBlockLimitUpdated represents a WithdrawalBlockLimitUpdated event raised by the GasMonetization contract.
type GasMonetizationWithdrawalBlockLimitUpdated struct {
	Limit *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalBlockLimitUpdated is a free log retrieval operation binding the contract event 0x6d21826867e00c5860f2c41ce6ab260d9b1e0083d852c2fcf38ae8aa983cc4c4.
//
// Solidity: event WithdrawalBlockLimitUpdated(uint256 limit)
func (_GasMonetization *GasMonetizationFilterer) FilterWithdrawalBlockLimitUpdated(opts *bind.FilterOpts) (*GasMonetizationWithdrawalBlockLimitUpdatedIterator, error) {

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "WithdrawalBlockLimitUpdated")
	if err != nil {
		return nil, err
	}
	return &GasMonetizationWithdrawalBlockLimitUpdatedIterator{contract: _GasMonetization.contract, event: "WithdrawalBlockLimitUpdated", logs: logs, sub: sub}, nil
}

// WatchWithdrawalBlockLimitUpdated is a free log subscription operation binding the contract event 0x6d21826867e00c5860f2c41ce6ab260d9b1e0083d852c2fcf38ae8aa983cc4c4.
//
// Solidity: event WithdrawalBlockLimitUpdated(uint256 limit)
func (_GasMonetization *GasMonetizationFilterer) WatchWithdrawalBlockLimitUpdated(opts *bind.WatchOpts, sink chan<- *GasMonetizationWithdrawalBlockLimitUpdated) (event.Subscription, error) {

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "WithdrawalBlockLimitUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationWithdrawalBlockLimitUpdated)
				if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalBlockLimitUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalBlockLimitUpdated is a log parse operation binding the contract event 0x6d21826867e00c5860f2c41ce6ab260d9b1e0083d852c2fcf38ae8aa983cc4c4.
//
// Solidity: event WithdrawalBlockLimitUpdated(uint256 limit)
func (_GasMonetization *GasMonetizationFilterer) ParseWithdrawalBlockLimitUpdated(log types.Log) (*GasMonetizationWithdrawalBlockLimitUpdated, error) {
	event := new(GasMonetizationWithdrawalBlockLimitUpdated)
	if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalBlockLimitUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationWithdrawalCanceledIterator is returned from FilterWithdrawalCanceled and is used to iterate over the raw logs and unpacked data for WithdrawalCanceled events raised by the GasMonetization contract.
type GasMonetizationWithdrawalCanceledIterator struct {
	Event *GasMonetizationWithdrawalCanceled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationWithdrawalCanceledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationWithdrawalCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationWithdrawalCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationWithdrawalCanceledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationWithdrawalCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationWithdrawalCanceled represents a WithdrawalCanceled event raised by the GasMonetization contract.
type GasMonetizationWithdrawalCanceled struct {
	Owner       common.Address
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalCanceled is a free log retrieval operation binding the contract event 0xc04d7db2ae23be2ba46893b43d7c4af2fc045905461f3df891e1d6c4d0683ef6.
//
// Solidity: event WithdrawalCanceled(address indexed owner, uint256 blockNumber)
func (_GasMonetization *GasMonetizationFilterer) FilterWithdrawalCanceled(opts *bind.FilterOpts, owner []common.Address) (*GasMonetizationWithdrawalCanceledIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "WithdrawalCanceled", ownerRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationWithdrawalCanceledIterator{contract: _GasMonetization.contract, event: "WithdrawalCanceled", logs: logs, sub: sub}, nil
}

// WatchWithdrawalCanceled is a free log subscription operation binding the contract event 0xc04d7db2ae23be2ba46893b43d7c4af2fc045905461f3df891e1d6c4d0683ef6.
//
// Solidity: event WithdrawalCanceled(address indexed owner, uint256 blockNumber)
func (_GasMonetization *GasMonetizationFilterer) WatchWithdrawalCanceled(opts *bind.WatchOpts, sink chan<- *GasMonetizationWithdrawalCanceled, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "WithdrawalCanceled", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationWithdrawalCanceled)
				if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalCanceled is a log parse operation binding the contract event 0xc04d7db2ae23be2ba46893b43d7c4af2fc045905461f3df891e1d6c4d0683ef6.
//
// Solidity: event WithdrawalCanceled(address indexed owner, uint256 blockNumber)
func (_GasMonetization *GasMonetizationFilterer) ParseWithdrawalCanceled(log types.Log) (*GasMonetizationWithdrawalCanceled, error) {
	event := new(GasMonetizationWithdrawalCanceled)
	if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationWithdrawalCompletedIterator is returned from FilterWithdrawalCompleted and is used to iterate over the raw logs and unpacked data for WithdrawalCompleted events raised by the GasMonetization contract.
type GasMonetizationWithdrawalCompletedIterator struct {
	Event *GasMonetizationWithdrawalCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationWithdrawalCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationWithdrawalCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationWithdrawalCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationWithdrawalCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationWithdrawalCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationWithdrawalCompleted represents a WithdrawalCompleted event raised by the GasMonetization contract.
type GasMonetizationWithdrawalCompleted struct {
	Owner       common.Address
	BlockNumber *big.Int
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalCompleted is a free log retrieval operation binding the contract event 0x35fc39e80f531e18729cd92611935c06db664fc014e88f0b60f14699df88377b.
//
// Solidity: event WithdrawalCompleted(address indexed owner, uint256 blockNumber, uint256 amount)
func (_GasMonetization *GasMonetizationFilterer) FilterWithdrawalCompleted(opts *bind.FilterOpts, owner []common.Address) (*GasMonetizationWithdrawalCompletedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "WithdrawalCompleted", ownerRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationWithdrawalCompletedIterator{contract: _GasMonetization.contract, event: "WithdrawalCompleted", logs: logs, sub: sub}, nil
}

// WatchWithdrawalCompleted is a free log subscription operation binding the contract event 0x35fc39e80f531e18729cd92611935c06db664fc014e88f0b60f14699df88377b.
//
// Solidity: event WithdrawalCompleted(address indexed owner, uint256 blockNumber, uint256 amount)
func (_GasMonetization *GasMonetizationFilterer) WatchWithdrawalCompleted(opts *bind.WatchOpts, sink chan<- *GasMonetizationWithdrawalCompleted, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "WithdrawalCompleted", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationWithdrawalCompleted)
				if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalCompleted is a log parse operation binding the contract event 0x35fc39e80f531e18729cd92611935c06db664fc014e88f0b60f14699df88377b.
//
// Solidity: event WithdrawalCompleted(address indexed owner, uint256 blockNumber, uint256 amount)
func (_GasMonetization *GasMonetizationFilterer) ParseWithdrawalCompleted(log types.Log) (*GasMonetizationWithdrawalCompleted, error) {
	event := new(GasMonetizationWithdrawalCompleted)
	if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationWithdrawalConfirmationsDeviationUpdatedIterator is returned from FilterWithdrawalConfirmationsDeviationUpdated and is used to iterate over the raw logs and unpacked data for WithdrawalConfirmationsDeviationUpdated events raised by the GasMonetization contract.
type GasMonetizationWithdrawalConfirmationsDeviationUpdatedIterator struct {
	Event *GasMonetizationWithdrawalConfirmationsDeviationUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationWithdrawalConfirmationsDeviationUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationWithdrawalConfirmationsDeviationUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationWithdrawalConfirmationsDeviationUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationWithdrawalConfirmationsDeviationUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationWithdrawalConfirmationsDeviationUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationWithdrawalConfirmationsDeviationUpdated represents a WithdrawalConfirmationsDeviationUpdated event raised by the GasMonetization contract.
type GasMonetizationWithdrawalConfirmationsDeviationUpdated struct {
	Limit *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalConfirmationsDeviationUpdated is a free log retrieval operation binding the contract event 0x8121fd2868e943e2754ac56b5980c9d40f6d1a98048aa242373c30c8d63542d0.
//
// Solidity: event WithdrawalConfirmationsDeviationUpdated(uint256 limit)
func (_GasMonetization *GasMonetizationFilterer) FilterWithdrawalConfirmationsDeviationUpdated(opts *bind.FilterOpts) (*GasMonetizationWithdrawalConfirmationsDeviationUpdatedIterator, error) {

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "WithdrawalConfirmationsDeviationUpdated")
	if err != nil {
		return nil, err
	}
	return &GasMonetizationWithdrawalConfirmationsDeviationUpdatedIterator{contract: _GasMonetization.contract, event: "WithdrawalConfirmationsDeviationUpdated", logs: logs, sub: sub}, nil
}

// WatchWithdrawalConfirmationsDeviationUpdated is a free log subscription operation binding the contract event 0x8121fd2868e943e2754ac56b5980c9d40f6d1a98048aa242373c30c8d63542d0.
//
// Solidity: event WithdrawalConfirmationsDeviationUpdated(uint256 limit)
func (_GasMonetization *GasMonetizationFilterer) WatchWithdrawalConfirmationsDeviationUpdated(opts *bind.WatchOpts, sink chan<- *GasMonetizationWithdrawalConfirmationsDeviationUpdated) (event.Subscription, error) {

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "WithdrawalConfirmationsDeviationUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationWithdrawalConfirmationsDeviationUpdated)
				if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalConfirmationsDeviationUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalConfirmationsDeviationUpdated is a log parse operation binding the contract event 0x8121fd2868e943e2754ac56b5980c9d40f6d1a98048aa242373c30c8d63542d0.
//
// Solidity: event WithdrawalConfirmationsDeviationUpdated(uint256 limit)
func (_GasMonetization *GasMonetizationFilterer) ParseWithdrawalConfirmationsDeviationUpdated(log types.Log) (*GasMonetizationWithdrawalConfirmationsDeviationUpdated, error) {
	event := new(GasMonetizationWithdrawalConfirmationsDeviationUpdated)
	if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalConfirmationsDeviationUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationWithdrawalConfirmationsLimitUpdatedIterator is returned from FilterWithdrawalConfirmationsLimitUpdated and is used to iterate over the raw logs and unpacked data for WithdrawalConfirmationsLimitUpdated events raised by the GasMonetization contract.
type GasMonetizationWithdrawalConfirmationsLimitUpdatedIterator struct {
	Event *GasMonetizationWithdrawalConfirmationsLimitUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationWithdrawalConfirmationsLimitUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationWithdrawalConfirmationsLimitUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationWithdrawalConfirmationsLimitUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationWithdrawalConfirmationsLimitUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationWithdrawalConfirmationsLimitUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationWithdrawalConfirmationsLimitUpdated represents a WithdrawalConfirmationsLimitUpdated event raised by the GasMonetization contract.
type GasMonetizationWithdrawalConfirmationsLimitUpdated struct {
	Limit *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalConfirmationsLimitUpdated is a free log retrieval operation binding the contract event 0x00209f2b72d564f415b7b96764fdee7ecf5f45854745e582a224b9a1a1ba1ddc.
//
// Solidity: event WithdrawalConfirmationsLimitUpdated(uint256 limit)
func (_GasMonetization *GasMonetizationFilterer) FilterWithdrawalConfirmationsLimitUpdated(opts *bind.FilterOpts) (*GasMonetizationWithdrawalConfirmationsLimitUpdatedIterator, error) {

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "WithdrawalConfirmationsLimitUpdated")
	if err != nil {
		return nil, err
	}
	return &GasMonetizationWithdrawalConfirmationsLimitUpdatedIterator{contract: _GasMonetization.contract, event: "WithdrawalConfirmationsLimitUpdated", logs: logs, sub: sub}, nil
}

// WatchWithdrawalConfirmationsLimitUpdated is a free log subscription operation binding the contract event 0x00209f2b72d564f415b7b96764fdee7ecf5f45854745e582a224b9a1a1ba1ddc.
//
// Solidity: event WithdrawalConfirmationsLimitUpdated(uint256 limit)
func (_GasMonetization *GasMonetizationFilterer) WatchWithdrawalConfirmationsLimitUpdated(opts *bind.WatchOpts, sink chan<- *GasMonetizationWithdrawalConfirmationsLimitUpdated) (event.Subscription, error) {

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "WithdrawalConfirmationsLimitUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationWithdrawalConfirmationsLimitUpdated)
				if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalConfirmationsLimitUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalConfirmationsLimitUpdated is a log parse operation binding the contract event 0x00209f2b72d564f415b7b96764fdee7ecf5f45854745e582a224b9a1a1ba1ddc.
//
// Solidity: event WithdrawalConfirmationsLimitUpdated(uint256 limit)
func (_GasMonetization *GasMonetizationFilterer) ParseWithdrawalConfirmationsLimitUpdated(log types.Log) (*GasMonetizationWithdrawalConfirmationsLimitUpdated, error) {
	event := new(GasMonetizationWithdrawalConfirmationsLimitUpdated)
	if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalConfirmationsLimitUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GasMonetizationWithdrawalRequestedIterator is returned from FilterWithdrawalRequested and is used to iterate over the raw logs and unpacked data for WithdrawalRequested events raised by the GasMonetization contract.
type GasMonetizationWithdrawalRequestedIterator struct {
	Event *GasMonetizationWithdrawalRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GasMonetizationWithdrawalRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GasMonetizationWithdrawalRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GasMonetizationWithdrawalRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GasMonetizationWithdrawalRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GasMonetizationWithdrawalRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GasMonetizationWithdrawalRequested represents a WithdrawalRequested event raised by the GasMonetization contract.
type GasMonetizationWithdrawalRequested struct {
	Owner       common.Address
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalRequested is a free log retrieval operation binding the contract event 0xe670e4e82118d22a1f9ee18920455ebc958bae26a90a05d31d3378788b1b0e44.
//
// Solidity: event WithdrawalRequested(address indexed owner, uint256 blockNumber)
func (_GasMonetization *GasMonetizationFilterer) FilterWithdrawalRequested(opts *bind.FilterOpts, owner []common.Address) (*GasMonetizationWithdrawalRequestedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.FilterLogs(opts, "WithdrawalRequested", ownerRule)
	if err != nil {
		return nil, err
	}
	return &GasMonetizationWithdrawalRequestedIterator{contract: _GasMonetization.contract, event: "WithdrawalRequested", logs: logs, sub: sub}, nil
}

// WatchWithdrawalRequested is a free log subscription operation binding the contract event 0xe670e4e82118d22a1f9ee18920455ebc958bae26a90a05d31d3378788b1b0e44.
//
// Solidity: event WithdrawalRequested(address indexed owner, uint256 blockNumber)
func (_GasMonetization *GasMonetizationFilterer) WatchWithdrawalRequested(opts *bind.WatchOpts, sink chan<- *GasMonetizationWithdrawalRequested, owner []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _GasMonetization.contract.WatchLogs(opts, "WithdrawalRequested", ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GasMonetizationWithdrawalRequested)
				if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalRequested is a log parse operation binding the contract event 0xe670e4e82118d22a1f9ee18920455ebc958bae26a90a05d31d3378788b1b0e44.
//
// Solidity: event WithdrawalRequested(address indexed owner, uint256 blockNumber)
func (_GasMonetization *GasMonetizationFilterer) ParseWithdrawalRequested(log types.Log) (*GasMonetizationWithdrawalRequested, error) {
	event := new(GasMonetizationWithdrawalRequested)
	if err := _GasMonetization.contract.UnpackLog(event, "WithdrawalRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
